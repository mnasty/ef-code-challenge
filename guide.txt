prerequisites:
---
brew install minikube
download docker desktop
download latest spark from apache, configure env vars

cheatsheet:
---
status:
kubectl get node
kubectl get pvc
kubectl get all
kubectl describe pod <podname>
kubectl logs -f <podname>

delete deployment (in case of err):
kubectl get deploy
kubectl delete deploy <name>

get master:
kubectl cluster-info

delete cluster:
minikube delete

view minikube dashboard:
minikube dashboard

Kub:
---
# increase docker memory to match below req

# start app
minikube start --driver=docker --memory 8192 --cpus 4

DB:
--
# apply yaml defined components to create db
kubectl apply -f res/k8/postgres-cm.yaml
kubectl apply -f res/k8/postgres-pv.yaml
kubectl apply -f res/k8/postgres-svc.yaml
kubectl apply -f res/k8/postgres-sec.yaml

kubectl apply -f res/k8/postgres-dep.yaml

# access postgres from command line
# TODO: show how to find pod names
kubectl exec -it postgres-76c84dc8d8-465gn --  psql -h localhost -U postgres --password -p 5432 postgres
Password=password

# ensure any local postgres services are not running
brew services stop postgresql

# forward postgres port outside virtual network
# TODO: show how to find pod names
kubectl port-forward postgres-76c84dc8d8-465gn 5432:5432

# execute LoadData.py
python3 LoadData.py

Model:
---
# go to spark home
cd $SPARK_HOME

# set/ensure docker env for local API image deployment
eval $(minikube docker-env)

# build docker image for spark & pyspark
bin/docker-image-tool.sh -m -t 3.3.0 -p ./kubernetes/dockerfiles/spark/bindings/python/Dockerfile build

# go back to project root

# configure jdbc URI
Model:39 -> postgresql://postgres:password@localhost:5432/postgres
	# kubectl get all
	# copy service IP
	# reconstruct URI for k8 virtual network, i.e.
	postgresql://postgres:password@10.110.230.221:5432/postgres

# update cluster ports
run-model.sh:3 -> --master k8s://https://127.0.0.1:xxxxx \
	# get current cluster port	
	kubectl cluster-info
	# edit execution script
	nano run-model.sh
	# apply new port
	--master k8s://https://127.0.0.1:52306 \

# set/ensure docker env for local API image deployment
eval $(minikube docker-env)

# build custom image for env, ensure you're running from /code-challenge
docker build . -t click-model-env

# deploy zookeeper
kubectl apply -f res/k8/zookeeper-svc.yaml

kubectl apply -f res/k8/zookeeper-dep.yaml

# deploy kafka
kubectl apply -f res/k8/kafka-svc.yaml

kubectl apply -f res/k8/kafka-dep.yaml

# apply spark config
kubectl apply -f res/k8/spark-roles.yaml

# ensure all deployed resources have spun up successfully
kubectl get all

# submit job
chmod +x run-model.sh
./run-model.sh

API:
---
# set/ensure docker env for local API image deployment
eval $(minikube docker-env)

# build docker image, ensure you're running from /code-challenge/api
docker build . -t click-api-env

# deploy API
kubectl apply -f res/k8/api-svc.yaml

kubectl apply -f res/k8/api-dep.yaml

# expose service
minikube service click-service
